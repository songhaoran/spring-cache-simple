<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!--property文件加载-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:resource.properties</value>
            </list>
        </property>
    </bean>

    <!--扫描service-->
    <context:component-scan base-package="com.song.cache.service"/>

    <!--redis-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="30"/>
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="10"/>
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="1024"/>
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="180000"/>
        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="10000"/>
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="1500"/>
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="true"/>
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="true"/>
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="false"/>
    </bean>

    <bean class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="127.0.0.1"/>
        <constructor-arg name="port" value="6379"/>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <property name="hostName" value="127.0.0.1"/>
        <property name="port" value="6379"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
        <property name="connectionFactory" ref="jedisConnectionFactory"/>

        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <!--自定义key的生成策略-->
    <bean id="classAndMethodKeyGenerator" class="com.song.cache.cache.keyGenerator.ClassAndMethodKeyGenerator"/>
    <!--开启缓存的注解,并修改主键生成策略-->
    <cache:annotation-driven cache-manager="cacheManager" key-generator="classAndMethodKeyGenerator"/>
    <!--cacheManager,可以配置多个缓存-->
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
               <!-- <bean class="com.song.cache.cache.ObjectRedisCache">
                    <property name="redisTemplate" ref="redisTemplate"/>
                    <property name="name" value="customObjectRedisCache"/>
                </bean>-->

                <bean class="com.song.cache.cache.ObjectRedisCache1">
                    <constructor-arg name="allowNullValues" value="false"/>
                    <constructor-arg name="expiration" value="100000"/>
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="objectRedisCache1"/>
                    <constructor-arg name="prefix" value="objectRedisCache1:"/>
                </bean>

                <bean class="org.springframework.data.redis.cache.RedisCache">
                    <!--默认false-->
                    <constructor-arg name="allowNullValues" value="false"/>
                    <constructor-arg name="expiration" value="100000"/>
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="redisCache"/>
                    <constructor-arg name="prefix" value=""/>
                </bean>
            </set>
        </property>
    </bean>

    <!--这种方式只能配置一个缓存-->
   <!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="cacheNames" value="redis"/>
    </bean>-->

</beans>